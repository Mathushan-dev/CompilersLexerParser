
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\003\012" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\010\003\000\002\010\004\000\002\011\005\000\002" +
    "\011\007\000\002\011\010\000\002\011\006\000\002\011" +
    "\011\000\002\011\010\000\002\011\007\000\002\011\013" +
    "\000\002\011\014\000\002\011\012\000\002\011\013\000" +
    "\002\011\011\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\005\000\002\013\004" +
    "\000\002\013\003\000\002\013\005\000\002\013\004\000" +
    "\002\013\003\000\002\013\006\000\002\013\006\000\002" +
    "\013\010\000\002\013\010\000\002\013\006\000\002\013" +
    "\005\000\002\013\010\000\002\013\007\000\002\013\004" +
    "\000\002\013\004\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\012\000" +
    "\002\012\003\000\002\012\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\016\006\000" +
    "\002\017\010\000\002\020\003\000\002\020\003\000\002" +
    "\004\003\000\002\004\004\000\002\005\006\000\002\005" +
    "\011\000\002\005\015\000\002\005\022\000\002\005\005" +
    "\000\002\005\005\000\002\005\006\000\002\005\007\000" +
    "\002\005\005\000\002\005\007\000\002\005\004\000\002" +
    "\006\003\000\002\006\004\000\002\007\006\000\002\007" +
    "\007\000\002\007\006\000\002\007\011\000\002\007\015" +
    "\000\002\007\022\000\002\007\005\000\002\007\005\000" +
    "\002\007\006\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\007\000\002\007\004\000\002\022" +
    "\003\000\002\022\005\000\002\024\003\000\002\024\005" +
    "\000\002\023\004\000\002\025\005\000\002\025\004\000" +
    "\002\025\004\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\032\005\016\006\026\007\020\010\012\011" +
    "\004\012\021\013\010\014\027\026\006\027\007\031\023" +
    "\075\017\001\002\000\014\047\uffba\051\uffba\052\uffba\071" +
    "\uffba\075\uffba\001\002\000\054\002\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016" +
    "\ufff8\021\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\044\ufff8\075\ufff8\001\002\000" +
    "\026\005\016\006\026\007\020\010\012\011\004\012\021" +
    "\013\010\014\027\036\u012c\075\042\001\002\000\004\075" +
    "\u0125\001\002\000\004\050\u0120\001\002\000\006\052\u0117" +
    "\075\u0116\001\002\000\014\047\uffbd\051\uffbd\052\uffbd\071" +
    "\uffbd\075\uffbd\001\002\000\014\047\uffc1\051\uffc1\052\uffc1" +
    "\071\uffc1\075\uffc1\001\002\000\034\002\000\005\016\006" +
    "\026\007\020\010\012\011\004\012\021\013\010\014\027" +
    "\026\040\027\007\031\023\075\017\001\002\000\004\002" +
    "\u0114\001\002\000\014\047\uffbe\051\uffbe\052\uffbe\071\uffbe" +
    "\075\uffbe\001\002\000\012\041\u010b\052\uffbf\071\u010c\075" +
    "\uffbf\001\002\000\014\047\uffbc\051\uffbc\052\uffbc\071\uffbc" +
    "\075\uffbc\001\002\000\014\047\uffb9\051\uffb9\052\uffb9\071" +
    "\uffb9\075\uffb9\001\002\000\014\047\uffc2\051\uffc2\052\uffc2" +
    "\071\uffc2\075\uffc2\001\002\000\004\075\u0105\001\002\000" +
    "\032\005\016\006\026\007\020\010\012\011\004\012\021" +
    "\013\010\014\027\026\006\027\007\031\023\075\017\001" +
    "\002\000\014\047\uffc0\051\uffc0\052\uffc0\071\uffc0\075\uffc0" +
    "\001\002\000\014\047\uffbb\051\uffbb\052\uffbb\071\uffbb\075" +
    "\uffbb\001\002\000\004\050\030\001\002\000\026\005\016" +
    "\006\026\007\020\010\012\011\004\012\021\013\010\014" +
    "\027\015\032\075\033\001\002\000\004\047\035\001\002" +
    "\000\006\047\uffb5\051\uffb5\001\002\000\012\047\uffbf\051" +
    "\uffbf\071\uffbf\075\uffbf\001\002\000\006\047\uffb6\051\uffb6" +
    "\001\002\000\014\047\uffb8\051\uffb8\052\uffb8\071\uffb8\075" +
    "\uffb8\001\002\000\054\002\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\021" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\044\ufff7\075\ufff7\001\002\000\034\002" +
    "\uffff\005\016\006\026\007\020\010\012\011\004\012\021" +
    "\013\010\014\027\026\040\027\007\031\023\075\017\001" +
    "\002\000\024\005\016\006\026\007\020\010\012\011\004" +
    "\012\021\013\010\014\027\075\042\001\002\000\034\002" +
    "\ufffd\005\016\006\026\007\020\010\012\011\004\012\021" +
    "\013\010\014\027\026\040\027\007\031\023\075\017\001" +
    "\002\000\006\037\371\075\uffbf\001\002\000\004\075\044" +
    "\001\002\000\004\037\045\001\002\000\026\005\016\006" +
    "\026\007\020\010\012\011\004\012\021\013\010\014\027" +
    "\040\051\075\033\001\002\000\010\040\uff95\044\uff95\051" +
    "\uff95\001\002\000\006\040\363\051\362\001\002\000\004" +
    "\075\361\001\002\000\004\043\052\001\002\000\050\005" +
    "\016\006\026\007\020\010\012\011\004\012\021\013\010" +
    "\014\027\016\061\021\056\026\040\027\007\030\055\031" +
    "\023\032\065\033\053\034\063\035\060\075\017\001\002" +
    "\000\004\075\357\001\002\000\022\016\uffb4\021\uffb4\030" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\044\uffb4\001\002" +
    "\000\004\075\354\001\002\000\004\043\351\001\002\000" +
    "\004\044\347\001\002\000\040\037\341\041\107\045\340" +
    "\046\077\053\106\057\073\064\076\073\100\074\103\075" +
    "\105\076\112\077\102\100\075\101\113\102\101\001\002" +
    "\000\004\037\224\001\002\000\052\005\016\006\026\007" +
    "\020\010\012\011\004\012\021\013\010\014\027\016\061" +
    "\021\056\026\040\027\007\030\055\031\023\032\065\033" +
    "\053\034\063\035\060\044\ufffb\075\017\001\002\000\036" +
    "\037\110\041\107\046\077\053\106\057\073\064\076\073" +
    "\100\074\103\075\105\076\112\077\102\100\075\101\113" +
    "\102\101\001\002\000\022\016\061\021\056\030\055\032" +
    "\065\033\053\034\063\035\060\044\ufffa\001\002\000\004" +
    "\037\066\001\002\000\004\075\067\001\002\000\004\040" +
    "\070\001\002\000\004\045\071\001\002\000\022\016\uffab" +
    "\021\uffab\030\uffab\032\uffab\033\uffab\034\uffab\035\uffab\044" +
    "\uffab\001\002\000\022\016\uffb3\021\uffb3\030\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\044\uffb3\001\002\000\036\037" +
    "\110\041\107\046\077\053\106\057\073\064\076\073\100" +
    "\074\103\075\105\076\112\077\102\100\075\101\113\102" +
    "\101\001\002\000\056\024\uffde\040\uffde\041\211\042\uffde" +
    "\043\uffde\045\uffde\046\uffde\050\uffde\051\uffde\052\200\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\065\uffde\067\uffde\070\uffde\072\uffde\001\002\000" +
    "\052\024\uffe8\040\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8" +
    "\050\uffe8\051\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060" +
    "\uffe8\061\uffe8\062\uffe8\063\uffe8\065\uffe8\067\uffe8\070\uffe8" +
    "\072\uffe8\001\002\000\004\037\206\001\002\000\102\024" +
    "\uff8f\037\110\040\uff8f\041\107\042\uff8f\043\uff8f\045\uff8f" +
    "\046\uff8f\050\uff8f\051\uff8f\053\106\054\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\076" +
    "\065\uff8f\067\uff8f\070\uff8f\072\uff8f\073\100\074\103\075" +
    "\105\076\112\077\102\100\075\101\113\102\101\001\002" +
    "\000\052\024\uffea\040\uffea\042\uffea\043\uffea\045\uffea\046" +
    "\uffea\050\uffea\051\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\065\uffea\067\uffea\070" +
    "\uffea\072\uffea\001\002\000\052\024\uffe4\040\uffe4\042\uffe4" +
    "\043\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\065\uffe4\067\uffe4\070\uffe4\072\uffe4\001\002\000\052\024" +
    "\uffe7\040\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\050\uffe7" +
    "\051\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\065\uffe7\067\uffe7\070\uffe7\072\uffe7" +
    "\001\002\000\052\024\uffe9\040\uffe9\042\uffe9\043\uffe9\045" +
    "\uffe9\046\uffe9\050\uffe9\051\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\065\uffe9\067" +
    "\uffe9\070\uffe9\072\uffe9\001\002\000\042\024\127\045\204" +
    "\046\130\050\137\054\122\055\140\056\135\057\123\060" +
    "\132\061\124\062\136\063\131\065\126\067\133\070\125" +
    "\072\134\001\002\000\060\024\uff97\037\171\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\045\uff97\046\uff97\050\uff97\051\uff97" +
    "\052\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061" +
    "\uff97\062\uff97\063\uff97\065\uff97\067\uff97\070\uff97\072\uff97" +
    "\001\002\000\036\037\110\041\107\046\077\053\106\057" +
    "\073\064\076\073\100\074\103\075\105\076\112\077\102" +
    "\100\075\101\113\102\101\001\002\000\040\037\110\041" +
    "\107\042\165\046\077\053\106\057\073\064\076\073\100" +
    "\074\103\075\105\076\112\077\102\100\075\101\113\102" +
    "\101\001\002\000\040\037\110\040\114\041\107\046\077" +
    "\053\106\057\073\064\076\073\100\074\103\075\105\076" +
    "\112\077\102\100\075\101\113\102\101\001\002\000\052" +
    "\024\uffe1\040\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\050" +
    "\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\065\uffe1\067\uffe1\070\uffe1\072" +
    "\uffe1\001\002\000\052\024\uffe6\040\uffe6\042\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\050\uffe6\051\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6" +
    "\067\uffe6\070\uffe6\072\uffe6\001\002\000\052\024\uffe5\040" +
    "\uffe5\042\uffe5\043\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\065\uffe5\067\uffe5\070\uffe5\072\uffe5\001\002" +
    "\000\052\024\uffdf\040\uffdf\042\uffdf\043\uffdf\045\uffdf\046" +
    "\uffdf\050\uffdf\051\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\065\uffdf\067\uffdf\070" +
    "\uffdf\072\uffdf\001\002\000\050\024\127\040\uffc4\042\uffc4" +
    "\045\uffc4\046\130\050\137\051\uffc4\054\122\055\140\056" +
    "\135\057\123\060\132\061\124\062\136\063\131\065\126" +
    "\067\133\070\125\072\134\001\002\000\006\040\120\051" +
    "\117\001\002\000\036\037\110\041\107\046\077\053\106" +
    "\057\073\064\076\073\100\074\103\075\105\076\112\077" +
    "\102\100\075\101\113\102\101\001\002\000\052\024\uffe0" +
    "\040\uffe0\042\uffe0\043\uffe0\045\uffe0\046\uffe0\050\uffe0\051" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\065\uffe0\067\uffe0\070\uffe0\072\uffe0\001" +
    "\002\000\050\024\127\040\uffc3\042\uffc3\045\uffc3\046\130" +
    "\050\137\051\uffc3\054\122\055\140\056\135\057\123\060" +
    "\132\061\124\062\136\063\131\065\126\067\133\070\125" +
    "\072\134\001\002\000\036\037\110\041\107\046\077\053" +
    "\106\057\073\064\076\073\100\074\103\075\105\076\112" +
    "\077\102\100\075\101\113\102\101\001\002\000\036\037" +
    "\110\041\107\046\077\053\106\057\073\064\076\073\100" +
    "\074\103\075\105\076\112\077\102\100\075\101\113\102" +
    "\101\001\002\000\036\037\110\041\107\046\077\053\106" +
    "\057\073\064\076\073\100\074\103\075\105\076\112\077" +
    "\102\100\075\101\113\102\101\001\002\000\036\037\110" +
    "\041\107\046\077\053\106\057\073\064\076\073\100\074" +
    "\103\075\105\076\112\077\102\100\075\101\113\102\101" +
    "\001\002\000\036\037\110\041\107\046\077\053\106\057" +
    "\073\064\076\073\100\074\103\075\105\076\112\077\102" +
    "\100\075\101\113\102\101\001\002\000\004\075\152\001" +
    "\002\000\102\024\uff91\037\110\040\uff91\041\107\042\uff91" +
    "\043\uff91\045\uff91\046\uff91\050\uff91\051\uff91\053\106\054" +
    "\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\076\065\uff91\067\uff91\070\uff91\072\uff91\073" +
    "\100\074\103\075\105\076\112\077\102\100\075\101\113" +
    "\102\101\001\002\000\036\037\110\041\107\046\077\053" +
    "\106\057\073\064\076\073\100\074\103\075\105\076\112" +
    "\077\102\100\075\101\113\102\101\001\002\000\036\037" +
    "\110\041\107\046\077\053\106\057\073\064\076\073\100" +
    "\074\103\075\105\076\112\077\102\100\075\101\113\102" +
    "\101\001\002\000\036\037\110\041\107\046\077\053\106" +
    "\057\073\064\076\073\100\074\103\075\105\076\112\077" +
    "\102\100\075\101\113\102\101\001\002\000\036\037\110" +
    "\041\107\046\077\053\106\057\073\064\076\073\100\074" +
    "\103\075\105\076\112\077\102\100\075\101\113\102\101" +
    "\001\002\000\036\037\110\041\107\046\077\053\106\057" +
    "\073\064\076\073\100\074\103\075\105\076\112\077\102" +
    "\100\075\101\113\102\101\001\002\000\036\037\110\041" +
    "\107\046\077\053\106\057\073\064\076\073\100\074\103" +
    "\075\105\076\112\077\102\100\075\101\113\102\101\001" +
    "\002\000\036\037\110\041\107\046\077\053\106\057\073" +
    "\064\076\073\100\074\103\075\105\076\112\077\102\100" +
    "\075\101\113\102\101\001\002\000\036\037\110\041\107" +
    "\046\077\053\106\057\073\064\076\073\100\074\103\075" +
    "\105\076\112\077\102\100\075\101\113\102\101\001\002" +
    "\000\052\024\uffd2\040\uffd2\042\uffd2\043\uffd2\045\uffd2\046" +
    "\130\050\137\051\uffd2\054\122\055\uffd2\056\uffd2\057\uffd2" +
    "\060\132\061\124\062\136\063\131\065\126\067\133\070" +
    "\125\072\134\001\002\000\042\024\uffcc\040\uffcc\042\uffcc" +
    "\043\uffcc\045\uffcc\046\uffcc\051\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\072\uffcc" +
    "\001\002\000\052\024\uffcd\040\uffcd\042\uffcd\043\uffcd\045" +
    "\uffcd\046\uffcd\050\137\051\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\136\063\131\065\126\067" +
    "\133\070\125\072\uffcd\001\002\000\052\024\uffd1\040\uffd1" +
    "\042\uffd1\043\uffd1\045\uffd1\046\130\050\137\051\uffd1\054" +
    "\122\055\uffd1\056\uffd1\057\uffd1\060\132\061\124\062\136" +
    "\063\131\065\126\067\133\070\125\072\134\001\002\000" +
    "\052\024\uffc7\040\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7" +
    "\050\137\051\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\136\063\131\065\126\067\133\070\125" +
    "\072\uffc7\001\002\000\042\024\uffca\040\uffca\042\uffca\043" +
    "\uffca\045\uffca\046\uffca\051\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\072\uffca\001" +
    "\002\000\052\024\uffcf\040\uffcf\042\uffcf\043\uffcf\045\uffcf" +
    "\046\130\050\137\051\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\136\063\131\065\126\067\133" +
    "\070\125\072\134\001\002\000\052\024\uffc8\040\uffc8\042" +
    "\uffc8\043\uffc8\045\uffc8\046\uffc8\050\137\051\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\136\063" +
    "\131\065\126\067\133\070\125\072\uffc8\001\002\000\052" +
    "\024\uff92\040\uff92\042\uff92\043\uff92\045\uff92\046\uff92\050" +
    "\137\051\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92" +
    "\061\uff92\062\136\063\131\065\126\067\133\070\125\072" +
    "\uff92\001\002\000\004\025\153\001\002\000\004\023\154" +
    "\001\002\000\004\037\155\001\002\000\036\037\110\041" +
    "\107\046\077\053\106\057\073\064\076\073\100\074\103" +
    "\075\105\076\112\077\102\100\075\101\113\102\101\001" +
    "\002\000\006\040\157\051\117\001\002\000\052\024\uffc5" +
    "\040\uffc5\042\uffc5\043\uffc5\045\uffc5\046\uffc5\050\uffc5\051" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\062\uffc5\063\uffc5\065\uffc5\067\uffc5\070\uffc5\072\uffc5\001" +
    "\002\000\042\024\uffcb\040\uffcb\042\uffcb\043\uffcb\045\uffcb" +
    "\046\uffcb\051\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\072\uffcb\001\002\000\042" +
    "\024\uffc9\040\uffc9\042\uffc9\043\uffc9\045\uffc9\046\uffc9\051" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\072\uffc9\001\002\000\052\024\uffce\040" +
    "\uffce\042\uffce\043\uffce\045\uffce\046\130\050\137\051\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\136\063\131\065\126\067\133\070\125\072\134\001\002" +
    "\000\052\024\uffd0\040\uffd0\042\uffd0\043\uffd0\045\uffd0\046" +
    "\130\050\137\051\uffd0\054\122\055\uffd0\056\uffd0\057\uffd0" +
    "\060\132\061\124\062\136\063\131\065\126\067\133\070" +
    "\125\072\134\001\002\000\052\024\uffd3\040\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\046\130\050\137\051\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\136\063\131" +
    "\065\126\067\133\070\125\072\134\001\002\000\052\024" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\050\uffe2" +
    "\051\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\065\uffe2\067\uffe2\070\uffe2\072\uffe2" +
    "\001\002\000\006\042\167\051\117\001\002\000\052\024" +
    "\uffe3\040\uffe3\042\uffe3\043\uffe3\045\uffe3\046\uffe3\050\uffe3" +
    "\051\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\065\uffe3\067\uffe3\070\uffe3\072\uffe3" +
    "\001\002\000\042\024\uffd5\040\uffd5\042\uffd5\043\uffd5\045" +
    "\uffd5\046\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\063\uffd5\072\uffd5\001\002\000" +
    "\040\037\110\040\172\041\107\046\077\053\106\057\073" +
    "\064\076\073\100\074\103\075\105\076\112\077\102\100" +
    "\075\101\113\102\101\001\002\000\054\024\uffd8\040\uffd8" +
    "\042\uffd8\043\uffd8\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052" +
    "\202\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\065\uffd8\067\uffd8\070\uffd8\072\uffd8\001" +
    "\002\000\006\040\174\051\117\001\002\000\054\024\uffd9" +
    "\040\uffd9\042\uffd9\043\uffd9\045\uffd9\046\uffd9\050\uffd9\051" +
    "\uffd9\052\175\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\065\uffd9\067\uffd9\070\uffd9\072" +
    "\uffd9\001\002\000\004\075\176\001\002\000\054\024\uff97" +
    "\040\uff97\042\uff97\043\uff97\045\uff97\046\uff97\050\uff97\051" +
    "\uff97\052\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\061\uff97\062\uff97\063\uff97\065\uff97\067\uff97\070\uff97\072" +
    "\uff97\001\002\000\054\024\uffd7\040\uffd7\042\uffd7\043\uffd7" +
    "\045\uffd7\046\uffd7\050\uffd7\051\uffd7\052\200\054\uffd7\055" +
    "\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7" +
    "\065\uffd7\067\uffd7\070\uffd7\072\uffd7\001\002\000\004\075" +
    "\201\001\002\000\056\024\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\045\uff96\046\uff96\050\uff96\051\uff96\052\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\065\uff96\067\uff96\070\uff96\072\uff96\001\002\000" +
    "\004\075\176\001\002\000\054\024\uffd6\040\uffd6\042\uffd6" +
    "\043\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052\200\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\063\uffd6\065\uffd6\067\uffd6\070\uffd6\072\uffd6\001\002\000" +
    "\022\016\uffad\021\uffad\030\uffad\032\uffad\033\uffad\034\uffad" +
    "\035\uffad\044\uffad\001\002\000\052\024\uff90\040\uff90\042" +
    "\uff90\043\uff90\045\uff90\046\uff90\050\137\051\uff90\054\uff90" +
    "\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\136\063" +
    "\131\065\126\067\133\070\125\072\uff90\001\002\000\036" +
    "\037\110\041\107\046\077\053\106\057\073\064\076\073" +
    "\100\074\103\075\105\076\112\077\102\100\075\101\113" +
    "\102\101\001\002\000\006\040\210\051\117\001\002\000" +
    "\052\024\uffc6\040\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6" +
    "\050\uffc6\051\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\065\uffc6\067\uffc6\070\uffc6" +
    "\072\uffc6\001\002\000\036\037\110\041\107\046\077\053" +
    "\106\057\073\064\076\073\100\074\103\075\105\076\112" +
    "\077\102\100\075\101\113\102\101\001\002\000\044\024" +
    "\uffe1\042\217\046\uffe1\050\uffe1\051\uffe1\054\uffe1\055\uffe1" +
    "\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\065" +
    "\uffe1\067\uffe1\070\uffe1\072\uffe1\001\002\000\006\042\214" +
    "\051\117\001\002\000\054\024\uffdd\040\uffdd\042\uffdd\043" +
    "\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\215\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\065\uffdd\067\uffdd\070\uffdd\072\uffdd\001\002\000\004" +
    "\075\176\001\002\000\054\024\uffdb\040\uffdb\042\uffdb\043" +
    "\uffdb\045\uffdb\046\uffdb\050\uffdb\051\uffdb\052\200\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\065\uffdb\067\uffdb\070\uffdb\072\uffdb\001\002\000\054" +
    "\024\uffdc\040\uffdc\042\uffdc\043\uffdc\045\uffdc\046\uffdc\050" +
    "\uffdc\051\uffdc\052\220\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\067\uffdc\070" +
    "\uffdc\072\uffdc\001\002\000\004\075\176\001\002\000\054" +
    "\024\uffda\040\uffda\042\uffda\043\uffda\045\uffda\046\uffda\050" +
    "\uffda\051\uffda\052\200\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\065\uffda\067\uffda\070" +
    "\uffda\072\uffda\001\002\000\052\024\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\045\uffd4\046\130\050\137\051\uffd4\054\122\055" +
    "\uffd4\056\uffd4\057\uffd4\060\132\061\124\062\136\063\131" +
    "\065\126\067\133\070\125\072\134\001\002\000\022\016" +
    "\061\021\056\030\055\032\065\033\053\034\063\035\060" +
    "\044\ufff9\001\002\000\036\037\110\041\107\046\077\053" +
    "\106\057\073\064\076\073\100\074\103\075\105\076\112" +
    "\077\102\100\075\101\113\102\101\001\002\000\042\024" +
    "\127\040\226\046\130\050\137\054\122\055\140\056\135" +
    "\057\123\060\132\061\124\062\136\063\131\065\126\067" +
    "\133\070\125\072\134\001\002\000\004\043\227\001\002" +
    "\000\042\005\016\006\026\007\020\010\012\011\004\012" +
    "\021\013\010\014\027\016\236\021\232\022\241\030\231" +
    "\033\230\034\242\035\235\075\237\001\002\000\004\075" +
    "\336\001\002\000\004\075\333\001\002\000\004\043\330" +
    "\001\002\000\004\075\324\001\002\000\044\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\016\uffa7\021\uffa7\022\uffa7\030\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\044\uffa7\075\uffa7\001\002\000\040\037\316\041\107" +
    "\045\315\046\077\053\106\057\073\064\076\073\100\074" +
    "\103\075\105\076\112\077\102\100\075\101\113\102\101" +
    "\001\002\000\004\037\272\001\002\000\006\071\267\075" +
    "\uffbf\001\002\000\044\005\016\006\026\007\020\010\012" +
    "\011\004\012\021\013\010\014\027\016\236\021\232\022" +
    "\241\030\231\033\230\034\242\035\235\044\250\075\237" +
    "\001\002\000\040\037\110\041\107\045\245\046\077\053" +
    "\106\057\073\064\076\073\100\074\103\075\105\076\112" +
    "\077\102\100\075\101\113\102\101\001\002\000\036\037" +
    "\110\041\107\046\077\053\106\057\073\064\076\073\100" +
    "\074\103\075\105\076\112\077\102\100\075\101\113\102" +
    "\101\001\002\000\042\024\127\045\244\046\130\050\137" +
    "\054\122\055\140\056\135\057\123\060\132\061\124\062" +
    "\136\063\131\065\126\067\133\070\125\072\134\001\002" +
    "\000\044\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\016\uff9e\021\uff9e\022\uff9e\030\uff9e" +
    "\033\uff9e\034\uff9e\035\uff9e\044\uff9e\075\uff9e\001\002\000" +
    "\044\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\016\uff9c\021\uff9c\022\uff9c\030\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\044\uff9c\075\uff9c\001\002\000\006" +
    "\045\247\051\117\001\002\000\044\005\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\016\uff9b" +
    "\021\uff9b\022\uff9b\030\uff9b\033\uff9b\034\uff9b\035\uff9b\044" +
    "\uff9b\075\uff9b\001\002\000\026\016\uffb1\017\253\020\252" +
    "\021\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\044" +
    "\uffb1\001\002\000\044\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\016\uffa6\021\uffa6\022" +
    "\uffa6\030\uffa6\033\uffa6\034\uffa6\035\uffa6\044\uffa6\075\uffa6" +
    "\001\002\000\004\043\264\001\002\000\036\037\110\041" +
    "\107\046\077\053\106\057\073\064\076\073\100\074\103" +
    "\075\105\076\112\077\102\100\075\101\113\102\101\001" +
    "\002\000\042\024\127\043\255\046\130\050\137\054\122" +
    "\055\140\056\135\057\123\060\132\061\124\062\136\063" +
    "\131\065\126\067\133\070\125\072\134\001\002\000\042" +
    "\005\016\006\026\007\020\010\012\011\004\012\021\013" +
    "\010\014\027\016\236\021\232\022\241\030\231\033\230" +
    "\034\242\035\235\075\237\001\002\000\044\005\016\006" +
    "\026\007\020\010\012\011\004\012\021\013\010\014\027" +
    "\016\236\021\232\022\241\030\231\033\230\034\242\035" +
    "\235\044\257\075\237\001\002\000\004\020\260\001\002" +
    "\000\004\043\261\001\002\000\042\005\016\006\026\007" +
    "\020\010\012\011\004\012\021\013\010\014\027\016\236" +
    "\021\232\022\241\030\231\033\230\034\242\035\235\075" +
    "\237\001\002\000\044\005\016\006\026\007\020\010\012" +
    "\011\004\012\021\013\010\014\027\016\236\021\232\022" +
    "\241\030\231\033\230\034\242\035\235\044\263\075\237" +
    "\001\002\000\022\016\uffaf\021\uffaf\030\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\044\uffaf\001\002\000\042\005\016" +
    "\006\026\007\020\010\012\011\004\012\021\013\010\014" +
    "\027\016\236\021\232\022\241\030\231\033\230\034\242" +
    "\035\235\075\237\001\002\000\044\005\016\006\026\007" +
    "\020\010\012\011\004\012\021\013\010\014\027\016\236" +
    "\021\232\022\241\030\231\033\230\034\242\035\235\044" +
    "\266\075\237\001\002\000\022\016\uffb0\021\uffb0\030\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\044\uffb0\001\002\000" +
    "\036\037\110\041\107\046\077\053\106\057\073\064\076" +
    "\073\100\074\103\075\105\076\112\077\102\100\075\101" +
    "\113\102\101\001\002\000\006\045\271\051\117\001\002" +
    "\000\044\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\016\uffa5\021\uffa5\022\uffa5\030\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\044\uffa5\075\uffa5\001\002\000" +
    "\036\037\110\041\107\046\077\053\106\057\073\064\076" +
    "\073\100\074\103\075\105\076\112\077\102\100\075\101" +
    "\113\102\101\001\002\000\042\024\127\040\274\046\130" +
    "\050\137\054\122\055\140\056\135\057\123\060\132\061" +
    "\124\062\136\063\131\065\126\067\133\070\125\072\134" +
    "\001\002\000\004\043\275\001\002\000\042\005\016\006" +
    "\026\007\020\010\012\011\004\012\021\013\010\014\027" +
    "\016\236\021\232\022\241\030\231\033\230\034\242\035" +
    "\235\075\237\001\002\000\044\005\016\006\026\007\020" +
    "\010\012\011\004\012\021\013\010\014\027\016\236\021" +
    "\232\022\241\030\231\033\230\034\242\035\235\044\277" +
    "\075\237\001\002\000\050\005\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\017\301" +
    "\020\300\021\uffa2\022\uffa2\030\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\044\uffa2\075\uffa2\001\002\000\004\043\312\001\002" +
    "\000\036\037\110\041\107\046\077\053\106\057\073\064" +
    "\076\073\100\074\103\075\105\076\112\077\102\100\075" +
    "\101\113\102\101\001\002\000\042\024\127\043\303\046" +
    "\130\050\137\054\122\055\140\056\135\057\123\060\132" +
    "\061\124\062\136\063\131\065\126\067\133\070\125\072" +
    "\134\001\002\000\042\005\016\006\026\007\020\010\012" +
    "\011\004\012\021\013\010\014\027\016\236\021\232\022" +
    "\241\030\231\033\230\034\242\035\235\075\237\001\002" +
    "\000\044\005\016\006\026\007\020\010\012\011\004\012" +
    "\021\013\010\014\027\016\236\021\232\022\241\030\231" +
    "\033\230\034\242\035\235\044\305\075\237\001\002\000" +
    "\004\020\306\001\002\000\004\043\307\001\002\000\042" +
    "\005\016\006\026\007\020\010\012\011\004\012\021\013" +
    "\010\014\027\016\236\021\232\022\241\030\231\033\230" +
    "\034\242\035\235\075\237\001\002\000\044\005\016\006" +
    "\026\007\020\010\012\011\004\012\021\013\010\014\027" +
    "\016\236\021\232\022\241\030\231\033\230\034\242\035" +
    "\235\044\311\075\237\001\002\000\044\005\uffa0\006\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016" +
    "\uffa0\021\uffa0\022\uffa0\030\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\044\uffa0\075\uffa0\001\002\000\042\005\016\006\026\007" +
    "\020\010\012\011\004\012\021\013\010\014\027\016\236" +
    "\021\232\022\241\030\231\033\230\034\242\035\235\075" +
    "\237\001\002\000\044\005\016\006\026\007\020\010\012" +
    "\011\004\012\021\013\010\014\027\016\236\021\232\022" +
    "\241\030\231\033\230\034\242\035\235\044\314\075\237" +
    "\001\002\000\044\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011" +
    "\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\021\uffa1\022\uffa1" +
    "\030\uffa1\033\uffa1\034\uffa1\035\uffa1\044\uffa1\075\uffa1\001" +
    "\002\000\044\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\014\uff98\016\uff98\021\uff98\022\uff98\030" +
    "\uff98\033\uff98\034\uff98\035\uff98\044\uff98\075\uff98\001\002" +
    "\000\040\037\110\040\114\041\107\046\077\053\106\057" +
    "\073\064\076\073\100\074\103\075\105\076\112\077\102" +
    "\100\075\101\113\102\101\001\002\000\006\045\320\051" +
    "\117\001\002\000\044\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\011\uff9a\012\uff9a\013\uff9a\014\uff9a\016\uff9a\021\uff9a\022" +
    "\uff9a\030\uff9a\033\uff9a\034\uff9a\035\uff9a\044\uff9a\075\uff9a" +
    "\001\002\000\006\040\322\051\117\001\002\000\044\024" +
    "\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\065" +
    "\uffe0\067\uffe0\070\uffe0\072\uffe0\001\002\000\044\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014" +
    "\uff99\016\uff99\021\uff99\022\uff99\030\uff99\033\uff99\034\uff99" +
    "\035\uff99\044\uff99\075\uff99\001\002\000\004\071\325\001" +
    "\002\000\036\037\110\041\107\046\077\053\106\057\073" +
    "\064\076\073\100\074\103\075\105\076\112\077\102\100" +
    "\075\101\113\102\101\001\002\000\042\024\127\045\327" +
    "\046\130\050\137\054\122\055\140\056\135\057\123\060" +
    "\132\061\124\062\136\063\131\065\126\067\133\070\125" +
    "\072\134\001\002\000\044\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\016\uffa4\021\uffa4" +
    "\022\uffa4\030\uffa4\033\uffa4\034\uffa4\035\uffa4\044\uffa4\075" +
    "\uffa4\001\002\000\042\005\016\006\026\007\020\010\012" +
    "\011\004\012\021\013\010\014\027\016\236\021\232\022" +
    "\241\030\231\033\230\034\242\035\235\075\237\001\002" +
    "\000\044\005\016\006\026\007\020\010\012\011\004\012" +
    "\021\013\010\014\027\016\236\021\232\022\241\030\231" +
    "\033\230\034\242\035\235\044\332\075\237\001\002\000" +
    "\044\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\016\uffa3\021\uffa3\022\uffa3\030\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\044\uffa3\075\uffa3\001\002\000\004" +
    "\075\334\001\002\000\004\045\335\001\002\000\044\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\016\uff9d\021\uff9d\022\uff9d\030\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\044\uff9d\075\uff9d\001\002\000\004\045\337" +
    "\001\002\000\044\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\016\uff9f\021\uff9f\022\uff9f" +
    "\030\uff9f\033\uff9f\034\uff9f\035\uff9f\044\uff9f\075\uff9f\001" +
    "\002\000\022\016\uffa8\021\uffa8\030\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\044\uffa8\001\002\000\040\037\110\040" +
    "\114\041\107\046\077\053\106\057\073\064\076\073\100" +
    "\074\103\075\105\076\112\077\102\100\075\101\113\102" +
    "\101\001\002\000\006\045\343\051\117\001\002\000\022" +
    "\016\uffaa\021\uffaa\030\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\044\uffaa\001\002\000\006\040\345\051\117\001\002" +
    "\000\044\024\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\065\uffe0\067\uffe0\070\uffe0\072\uffe0\001\002\000" +
    "\022\016\uffa9\021\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\044\uffa9\001\002\000\004\045\350\001\002\000" +
    "\054\002\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\016\uffef\021\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\044\uffef\075\uffef\001\002\000\042\005\016\006\026\007" +
    "\020\010\012\011\004\012\021\013\010\014\027\016\236" +
    "\021\232\022\241\030\231\033\230\034\242\035\235\075" +
    "\237\001\002\000\044\005\016\006\026\007\020\010\012" +
    "\011\004\012\021\013\010\014\027\016\236\021\232\022" +
    "\241\030\231\033\230\034\242\035\235\044\353\075\237" +
    "\001\002\000\022\016\uffb2\021\uffb2\030\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\044\uffb2\001\002\000\004\075\355" +
    "\001\002\000\004\045\356\001\002\000\022\016\uffac\021" +
    "\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\044\uffac" +
    "\001\002\000\004\045\360\001\002\000\022\016\uffae\021" +
    "\uffae\030\uffae\032\uffae\033\uffae\034\uffae\035\uffae\044\uffae" +
    "\001\002\000\010\040\uff93\044\uff93\051\uff93\001\002\000" +
    "\024\005\016\006\026\007\020\010\012\011\004\012\021" +
    "\013\010\014\027\075\033\001\002\000\004\043\364\001" +
    "\002\000\050\005\016\006\026\007\020\010\012\011\004" +
    "\012\021\013\010\014\027\016\061\021\056\026\040\027" +
    "\007\030\055\031\023\032\065\033\053\034\063\035\060" +
    "\075\017\001\002\000\004\044\366\001\002\000\004\045" +
    "\367\001\002\000\054\002\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\016\uffee\021" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\044\uffee\075\uffee\001\002\000\010\040" +
    "\uff94\044\uff94\051\uff94\001\002\000\026\005\016\006\026" +
    "\007\020\010\012\011\004\012\021\013\010\014\027\040" +
    "\373\075\033\001\002\000\006\040\u0100\051\362\001\002" +
    "\000\004\043\374\001\002\000\050\005\016\006\026\007" +
    "\020\010\012\011\004\012\021\013\010\014\027\016\061" +
    "\021\056\026\040\027\007\030\055\031\023\032\065\033" +
    "\053\034\063\035\060\075\017\001\002\000\004\044\376" +
    "\001\002\000\004\045\377\001\002\000\054\002\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\016\uffed\021\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\044\uffed\075\uffed" +
    "\001\002\000\004\043\u0101\001\002\000\050\005\016\006" +
    "\026\007\020\010\012\011\004\012\021\013\010\014\027" +
    "\016\061\021\056\026\040\027\007\030\055\031\023\032" +
    "\065\033\053\034\063\035\060\075\017\001\002\000\004" +
    "\044\u0103\001\002\000\004\045\u0104\001\002\000\054\002" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\016\uffec\021\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\044\uffec" +
    "\075\uffec\001\002\000\004\071\u0106\001\002\000\004\043" +
    "\u0107\001\002\000\050\005\016\006\026\007\020\010\012" +
    "\011\004\012\021\013\010\014\027\016\061\021\056\026" +
    "\040\027\007\030\055\031\023\032\065\033\053\034\063" +
    "\035\060\075\017\001\002\000\004\044\u0109\001\002\000" +
    "\004\045\u010a\001\002\000\054\002\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\021\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\044\uffeb\075\uffeb\001\002\000" +
    "\036\037\110\041\107\046\077\053\106\057\073\064\076" +
    "\073\100\074\103\075\105\076\112\077\102\100\075\101" +
    "\113\102\101\001\002\000\036\037\110\041\107\046\077" +
    "\053\106\057\073\064\076\073\100\074\103\075\105\076" +
    "\112\077\102\100\075\101\113\102\101\001\002\000\006" +
    "\045\u010e\051\117\001\002\000\054\002\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\016\ufff3\021\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\044\ufff3\075\ufff3\001\002" +
    "\000\006\042\u0110\051\117\001\002\000\004\071\u0111\001" +
    "\002\000\036\037\110\041\107\046\077\053\106\057\073" +
    "\064\076\073\100\074\103\075\105\076\112\077\102\100" +
    "\075\101\113\102\101\001\002\000\006\045\u0113\051\117" +
    "\001\002\000\054\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\021\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\044\ufff2\075\ufff2\001\002\000\004\002\001" +
    "\001\002\000\034\002\ufffe\005\016\006\026\007\020\010" +
    "\012\011\004\012\021\013\010\014\027\026\040\027\007" +
    "\031\023\075\017\001\002\000\006\045\u011c\071\u011d\001" +
    "\002\000\024\005\016\006\026\007\020\010\012\011\004" +
    "\012\021\013\010\014\027\075\033\001\002\000\004\071" +
    "\u0119\001\002\000\036\037\110\041\107\046\077\053\106" +
    "\057\073\064\076\073\100\074\103\075\105\076\112\077" +
    "\102\100\075\101\113\102\101\001\002\000\006\045\u011b" +
    "\051\117\001\002\000\054\002\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4" +
    "\021\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\044\ufff4\075\ufff4\001\002\000\054" +
    "\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\016\ufff6\021\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\044" +
    "\ufff6\075\ufff6\001\002\000\036\037\110\041\107\046\077" +
    "\053\106\057\073\064\076\073\100\074\103\075\105\076" +
    "\112\077\102\100\075\101\113\102\101\001\002\000\006" +
    "\045\u011f\051\117\001\002\000\054\002\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\016\ufff5\021\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\034\ufff5\035\ufff5\044\ufff5\075\ufff5\001\002" +
    "\000\026\005\016\006\026\007\020\010\012\011\004\012" +
    "\021\013\010\014\027\015\032\075\033\001\002\000\004" +
    "\051\u0122\001\002\000\026\005\016\006\026\007\020\010" +
    "\012\011\004\012\021\013\010\014\027\015\032\075\033" +
    "\001\002\000\004\047\u0124\001\002\000\014\047\uffb7\051" +
    "\uffb7\052\uffb7\071\uffb7\075\uffb7\001\002\000\004\043\u0126" +
    "\001\002\000\026\005\016\006\026\007\020\010\012\011" +
    "\004\012\021\013\010\014\027\044\u0128\075\033\001\002" +
    "\000\006\044\u012a\051\362\001\002\000\004\045\u0129\001" +
    "\002\000\054\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\021\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\044\ufff0\075\ufff0\001\002\000\004\045\u012b\001" +
    "\002\000\054\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\021\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\044\ufff1\075\ufff1\001\002\000\004\037\u012d\001" +
    "\002\000\004\040\u012e\001\002\000\004\043\u012f\001\002" +
    "\000\050\005\016\006\026\007\020\010\012\011\004\012" +
    "\021\013\010\014\027\016\061\021\056\026\040\027\007" +
    "\030\055\031\023\032\065\033\053\034\063\035\060\075" +
    "\017\001\002\000\004\044\u0131\001\002\000\004\045\u0132" +
    "\001\002\000\034\002\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\026\ufffc\027\ufffc" +
    "\031\ufffc\075\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\022\002\014\003\013\010\023\011\004\015" +
    "\010\016\021\017\012\021\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\042\016\021\017\012\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\u0114\011\004\015\010\016\021\017\012\021\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\036\011\035\015\010\016\021\017" +
    "\012\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\033\016\021\017\012\020" +
    "\030\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\040\011\004\015\010\016\021" +
    "\017\012\021\024\001\001\000\012\015\042\016\021\017" +
    "\012\021\024\001\001\000\014\011\035\015\010\016\021" +
    "\017\012\021\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\047\016\021\017\012" +
    "\021\024\023\045\024\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\063\005\053\010\061\011\004\014\056\015\010\016" +
    "\021\017\012\021\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\341\013\114\022\073\025\110\001\001" +
    "\000\002\001\001\000\020\004\222\005\053\011\035\015" +
    "\010\016\021\017\012\021\024\001\001\000\010\013\103" +
    "\022\073\025\110\001\001\000\004\005\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\221\022\073\025\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\204\022\073\025" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\167\022\073\025\110\001\001\000\012" +
    "\012\165\013\114\022\073\025\110\001\001\000\012\012" +
    "\115\013\114\022\073\025\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\120\022\073" +
    "\025\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\163\022\073\025\110\001\001\000\010\013\162" +
    "\022\073\025\110\001\001\000\010\013\161\022\073\025" +
    "\110\001\001\000\010\013\160\022\073\025\110\001\001" +
    "\000\010\013\157\022\073\025\110\001\001\000\002\001" +
    "\001\000\010\013\150\022\073\025\110\001\001\000\010" +
    "\013\147\022\073\025\110\001\001\000\010\013\146\022" +
    "\073\025\110\001\001\000\010\013\145\022\073\025\110" +
    "\001\001\000\010\013\144\022\073\025\110\001\001\000" +
    "\010\013\143\022\073\025\110\001\001\000\010\013\142" +
    "\022\073\025\110\001\001\000\010\013\141\022\073\025" +
    "\110\001\001\000\010\013\140\022\073\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\155" +
    "\013\114\022\073\025\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\172\013\114\022\073\025\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\206\013\114\022\073\025\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\212\013\114\022" +
    "\073\025\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\071\001\001\000" +
    "\010\013\224\022\073\025\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\237\007\233\015\232\016" +
    "\021\017\012\021\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\316\013\114\022\073\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\250\015" +
    "\232\016\021\017\012\021\024\001\001\000\012\012\245" +
    "\013\114\022\073\025\110\001\001\000\010\013\242\022" +
    "\073\025\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\253\022\073\025\110\001\001\000\002\001\001\000" +
    "\016\006\255\007\233\015\232\016\021\017\012\021\024" +
    "\001\001\000\014\007\250\015\232\016\021\017\012\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\261\007\233\015\232\016\021\017\012\021\024\001" +
    "\001\000\014\007\250\015\232\016\021\017\012\021\024" +
    "\001\001\000\002\001\001\000\016\006\264\007\233\015" +
    "\232\016\021\017\012\021\024\001\001\000\014\007\250" +
    "\015\232\016\021\017\012\021\024\001\001\000\002\001" +
    "\001\000\012\012\267\013\114\022\073\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\272\022" +
    "\073\025\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\275\007\233\015\232\016\021\017\012\021" +
    "\024\001\001\000\014\007\250\015\232\016\021\017\012" +
    "\021\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\301\022\073\025\110\001\001\000\002\001\001" +
    "\000\016\006\303\007\233\015\232\016\021\017\012\021" +
    "\024\001\001\000\014\007\250\015\232\016\021\017\012" +
    "\021\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\307\007\233\015\232\016\021\017\012\021\024" +
    "\001\001\000\014\007\250\015\232\016\021\017\012\021" +
    "\024\001\001\000\002\001\001\000\016\006\312\007\233" +
    "\015\232\016\021\017\012\021\024\001\001\000\014\007" +
    "\250\015\232\016\021\017\012\021\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\320\013\114\022" +
    "\073\025\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\325\022\073\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\330\007" +
    "\233\015\232\016\021\017\012\021\024\001\001\000\014" +
    "\007\250\015\232\016\021\017\012\021\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\343\013\114\022\073\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\351\007\233\015\232\016\021\017" +
    "\012\021\024\001\001\000\014\007\250\015\232\016\021" +
    "\017\012\021\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\047\016" +
    "\021\017\012\021\024\023\367\001\001\000\002\001\001" +
    "\000\024\004\063\005\053\010\061\011\004\014\364\015" +
    "\010\016\021\017\012\021\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\047\016\021\017\012\021\024\023\045\024\371" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\063\005\053\010\061\011\004\014\374\015\010\016\021" +
    "\017\012\021\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\063" +
    "\005\053\010\061\011\004\014\u0101\015\010\016\021\017" +
    "\012\021\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\063\005\053\010\061\011\004\014\u0107\015\010" +
    "\016\021\017\012\021\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\u010e\013\114" +
    "\022\073\025\110\001\001\000\012\012\u010c\013\114\022" +
    "\073\025\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\u0111\013" +
    "\114\022\073\025\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\035\015\010\016" +
    "\021\017\012\021\024\001\001\000\002\001\001\000\012" +
    "\015\u0117\016\021\017\012\021\024\001\001\000\002\001" +
    "\001\000\012\012\u0119\013\114\022\073\025\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\u011d\013\114\022\073\025\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\033\016\021\017" +
    "\012\020\u0120\021\024\001\001\000\002\001\001\000\014" +
    "\015\033\016\021\017\012\020\u0122\021\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\047\016\021\017\012\021\024\023\045\024\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\063\005\053" +
    "\010\061\011\004\014\u012f\015\010\016\021\017\012\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



  static class ErrorInfo {
    public int line;
    public int column;

    public ErrorInfo(int line, int column) {
      this.line = line;
      this.column = column;
    }
  }

  Lexer lexer;

  // used by SC.java to decide whether parsing is successful
  public boolean syntaxErrors;

  public Parser(Lexer lex) {
      super(lex);
      lexer = lex;
  }

  public void syntax_error(Symbol cur_token) {
    this.syntaxErrors = true;
  }

  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    this.syntaxErrors = true;
    report_fatal_error(
      "Syntax error at line " + (cur_token.left+1) + ", column "
      + cur_token.right + ".\n", null
    );
  }

  public void custom_err_report(String message, int line, int column)
    throws java.lang.Exception
  {
    this.syntaxErrors = true;
    report_fatal_error( message + "\n", new ErrorInfo(line, column) );
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= main 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= declarations main 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= main declarations 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= declarations main declarations 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= FDEF MAIN LPAREN RPAREN LBRACE function RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= declarations 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= statements 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function ::= declarations statements 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarations ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarations ::= declarations declaration 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= type ID SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= type ID ASSIGN expressions SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= type DOT type ASSIGN expressions SEMICOLON 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= ID ASSIGN expressions SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= ID LBRACK expressions RBRACK ASSIGN expressions SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int es1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= TDEF ID LBRACE declaration_list RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= TDEF ID LBRACE RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= FDEF type ID LPAREN RPAREN LBRACE function RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= FDEF type ID LPAREN declaration_list RPAREN LBRACE function RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= FDEF ID LPAREN RPAREN LBRACE function RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration ::= FDEF ID LPAREN declaration_list RPAREN LBRACE function RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object df = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration ::= THREAD ID ASSIGN LBRACE function RBRACE SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= RAT 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= CHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= LBRACK expressions RBRACK 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= slice_expression 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= LPAREN expressions RPAREN 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= ids 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= ids LBRACK expressions RBRACK 
            {
              Object RESULT =null;
		int seqileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int seqiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object seqi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= ids LBRACK slice_expression RBRACK 
            {
              Object RESULT =null;
		int seqileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int seqiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object seqi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= ids LBRACK expressions RBRACK DOT ids 
            {
              Object RESULT =null;
		int seqi1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int seqi1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object seqi1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int seqi2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqi2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seqi2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= ids LBRACK slice_expression RBRACK DOT ids 
            {
              Object RESULT =null;
		int seqi1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int seqi1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object seqi1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int seqi2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqi2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seqi2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= ID LPAREN expressions RPAREN 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= ID LPAREN expressions RPAREN DOT ids 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int seqileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seqi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= ID LPAREN RPAREN DOT ids 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int seqileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seqiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object seqi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= NOT expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= MINUS expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression AND expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression OR expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression PLUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression MINUS expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression MULTIPLY expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression DIVIDE expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression POWER expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression LESSTHAN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression LESSTHANEQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression EQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression NOTEQUAL expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression IN expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression QUESTION expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= LENGTH LPAREN expressions RPAREN 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression FOR ID OF RANGE LPAREN expressions RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expressions ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expressions ::= expressions COMMA expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= seqType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= dictType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= normalType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // normalType ::= BOOL_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normalType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // normalType ::= FLOAT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normalType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // normalType ::= RAT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normalType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // normalType ::= INT_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normalType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // normalType ::= CHAR_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normalType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // normalType ::= STR_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normalType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // seqType ::= SEQ_TYPE LESSTHAN auxType GREATTHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqType",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dictType ::= DICT_TYPE LESSTHAN auxType COMMA auxType GREATTHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dictType",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // auxType ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("auxType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // auxType ::= ANY_TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("auxType",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statements ::= statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statements ::= statements statement 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= WHILE LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= IF LPAREN expression RPAREN LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // statement ::= IF LPAREN expression RPAREN LBRACE while_statements RBRACE ELSE LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int ws1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ws1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ws1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ws2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ws2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= IF LPAREN expression RPAREN LBRACE while_statements RBRACE ELIF expression LBRACE while_statements RBRACE ELSE LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int ws1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int ws1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object ws1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ws2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ws2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ws2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ws3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ws3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= READ ID SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement ::= PRINT expression SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= ALIAS ID ID SEMICOLON 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= WAIT LPAREN ID RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= RETURN expressions SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= RETURN LPAREN expressions RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // while_statements ::= while_statement 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_statements ::= while_statements while_statement 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // while_statement ::= ID ASSIGN expressions SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // while_statement ::= type ID ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // while_statement ::= WHILE LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // while_statement ::= IF LPAREN expression RPAREN LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // while_statement ::= IF LPAREN expression RPAREN LBRACE while_statements RBRACE ELSE LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int ws1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ws1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ws1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ws2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ws2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // while_statement ::= IF LPAREN expression RPAREN LBRACE while_statements RBRACE ELIF expression LBRACE while_statements RBRACE ELSE LBRACE while_statements RBRACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int ws1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int ws1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object ws1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ws2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ws2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ws2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ws3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ws3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ws3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // while_statement ::= READ ID SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // while_statement ::= PRINT expression SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // while_statement ::= ALIAS ID ID SEMICOLON 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while_statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // while_statement ::= BREAK expressions SEMICOLON 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // while_statement ::= RETURN expressions SEMICOLON 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while_statement ::= RETURN LPAREN expressions RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // while_statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ids ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ids ::= ids DOT ID 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declaration_list ::= declaration_list_item 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declaration_list ::= declaration_list COMMA declaration_list_item 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaration_list_item ::= type ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_list_item",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // slice_expression ::= expression COLON expression 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // slice_expression ::= expression COLON 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // slice_expression ::= COLON expression 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // slice_expression ::= COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
